plugins {
    id 'com.github.johnrengelman.shadow'
}

jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Main-Class': "$mainClassName"
        )
    }

    // Required to merge the 'dsbulk-reference.conf' otherwise the runtime will fail with:
    // No configuration setting found for key 'dsbulk.metaSettings'
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'dsbulk-reference.conf'
    }

    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource = 'driver-reference.conf'
    }

    dependencies {
        // Exclude log4j from the shadow jar. This is optional step and meant to reduce the size of the nar.
        exclude "org/apache/logging/**"
        exclude "org/apache/log4j/**"
        exclude "org/apache/commons/logging/**"
        // relocate doesn't work if the target exist
        exclude 'com/datastax/oss/dsbulk/workflow/commons/settings/LogSettings.class'
        exclude 'com/datastax/oss/dsbulk/workflow/commons/settings/LogSettings$1.class'
    }

    // Change the behavior LogSettings to skip logback configuration if it is not bound at runtime
    //relocate 'com.datastax.oss.cdc.backfill.dsbulk.LogSettings', 'com.datastax.oss.dsbulk.workflow.commons.settings.LogSettings'
    relocate('com.datastax.oss.cdc.backfill.dsbulk', 'com.datastax.oss.dsbulk.workflow.commons.settings') {
        include 'com.datastax.oss.cdc.backfill.dsbulk.LogSettings**'
    }

    zip64=true
}

jar.enabled = true
assemble.dependsOn(shadowJar)

compileTestJava {
    options.compilerArgs += '-parameters'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-Xlint:none'
}

sourceSets {
    // Make the compileOnly dependencies available when compiling/running tests
    test.compileClasspath += configurations.compileClasspath
    test.runtimeClasspath += configurations.compileClasspath
}

dependencies {
    implementation project(':agent-c4')
    implementation project(':agent')

    implementation "com.datastax.oss:dsbulk-config:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-runner:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-workflow-unload:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-connectors-csv:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-executor-reactor:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-batcher-reactor:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-codecs-api:${dsbulkVersion}"
    implementation "com.datastax.oss:dsbulk-codecs-text:${dsbulkVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"

    implementation "info.picocli:picocli:4.7.1"
    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "ch.qos.logback:logback-classic:1.2.11"
    implementation "org.apache.cassandra:cassandra-all:${cassandra4Version}"
    implementation "${pulsarGroup}:pulsar-client:${pulsarVersion}"
    implementation "${pulsarGroup}:pulsar-client-tools-api:${pulsarVersion}"

    runtimeOnly 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
    testImplementation "org.mockito:mockito-core:3.11.1"
    testImplementation "com.datastax.oss:dsbulk-tests:${dsbulkVersion}"

    testImplementation project(':connector')
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation project(':testcontainers')
    testImplementation "${pulsarGroup}:pulsar-client:${pulsarVersion}"
    // https://mvnrepository.com/artifact/commons-io/commons-io
    testImplementation 'commons-io:commons-io:2.11.0'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
}

// Custom nar task that wraps the shadowJar for pulsar admin extension purposes.
tasks.register('nar', Zip) {
    dependsOn shadowJar

    // bundle the shadow jar as is
    from(shadowJar.archiveFile) {
        into "META-INF/bundled-dependencies"
    }

    // bundle metadata and command_factory.yaml files
    sourceSets.main.resources.include("META-INF/**").each {
        def splitPath = it.parent.split("META-INF")
        def relativeParentDir = splitPath.length > 1 ? splitPath.last() : ""
        from(it) {
            into "META-INF" + relativeParentDir
        }
    }

    // explicitly include all files in the resources folder, otherwise the shadowJar will not include them
    sourceSets.main.resources.include("**/*")

    archiveFileName = "pulsar-cassandra-admin-${project.version}-nar.nar"
    destinationDirectory = file("${buildDir}/libs")
}

assemble.dependsOn(nar)

test {
    useJUnitPlatform()

    exclude 'com/datastax/oss/cdc/backfill/e2e/**' // exclude e2e tests
}

task e2eTest(type: Test) {
    include 'com/datastax/oss/cdc/backfill/e2e/**'

    testLogging.showStandardStreams = true

    dependsOn project(':connector').assemble // couldn't take dependency on nar directly
    dependsOn nar

    useJUnitPlatform()

    environment 'PULSAR_IMAGE', testPulsarImage + ':' + testPulsarImageTag
    def cassandraFamily =  project.hasProperty("cassandraFamily") ? project.property("cassandraFamily") : "c4";
    if (cassandraFamily == "c3") {
        dependsOn project(':agent-c3').shadowJar
        systemProperty "cassandraFamily", "c3"
        systemProperty "agentBuildDir", project(':agent-c3').buildDir
        environment 'CASSANDRA_IMAGE', 'cassandra:' + cassandra3Version
    } else if (cassandraFamily == "c4") {
        dependsOn project(':agent-c4').shadowJar
        systemProperty "cassandraFamily", "c4"
        systemProperty "agentBuildDir", project(':agent-c4').buildDir
        environment 'CASSANDRA_IMAGE', 'cassandra:' + cassandra4Version
    } else if (cassandraFamily == "c5") {
        dependsOn project(':agent-c5').shadowJar
        systemProperty "cassandraFamily", "c5"
        systemProperty "agentBuildDir", project(':agent-c5').buildDir
        environment 'CASSANDRA_IMAGE', 'cassandra:' + cassandra5Version
    } else if (cassandraFamily == "dse4") {
        dependsOn project(':agent-dse4').shadowJar
        systemProperty "cassandraFamily", "dse4"
        systemProperty "agentBuildDir", project(':agent-dse4').buildDir
        environment 'CASSANDRA_IMAGE', 'datastax/dse-server:' + dse4Version

    } else {
        throw new GradleException("Unknown Cassandra family. Use -PcassandraFamily=[c3|c4|c5|dse4]")
    }

    systemProperty "connectorBuildDir", project(':connector').buildDir
    systemProperty "cdcBackfillBuildDir", buildDir
    systemProperty "projectVersion", project.version
}
